  public  static class GZipCompressionForPako
    {
        public static void CopyTo(Stream source, Stream destination)
        {
            source.CopyToAsync(destination).Wait();
        }
 
        public static byte[] SerializeAndCompress(this object obj)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(obj, new JsonSerializerSettings()
            {
                ContractResolver = new DefaultContractResolver()
                {
                    NamingStrategy = new CamelCaseNamingStrategy()
                }
            }));
 
            using (var msi = new MemoryStream(bytes))
            using (var mso = new MemoryStream())
            {
                using (var gs = new GZipStream(mso, CompressionMode.Compress, true))
                {
                    CopyTo(msi, gs);
                }
                return mso.ToArray();
            }
        }
 
        public static T DecompressAndDeserialize<T>(this byte[] data)
        {
            using (var msi = new MemoryStream(data))
            using (var mso = new MemoryStream())
            {
                using (var gs = new GZipStream(msi, CompressionMode.Decompress, true))
                {
                    CopyTo(gs, mso);
                }
                 return (T)JsonConvert.DeserializeObject<T>(Encoding.UTF8.GetString(mso.ToArray()));
            }
        }
    }
