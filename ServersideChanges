  public  static class GZipCompressionForPako
    {
        public static void CopyTo(Stream source, Stream destination)
        {
            source.CopyToAsync(destination).Wait();
        }
 
        public static byte[] SerializeAndCompress(this object obj)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(obj, new JsonSerializerSettings()
            {
                ContractResolver = new DefaultContractResolver()
                {
                    NamingStrategy = new CamelCaseNamingStrategy() // by default we are converting  data into camelcase if you are following pascal case on angular side use the PascalCaseNamingStrategy(). the code has been pasted in last
                }
            }));
 
            using (var msi = new MemoryStream(bytes))
            using (var mso = new MemoryStream())
            {
                using (var gs = new GZipStream(mso, CompressionMode.Compress, true))
                {
                    CopyTo(msi, gs);
                }
                return mso.ToArray();
            }
        }
 
        public static T DecompressAndDeserialize<T>(this byte[] data)
        {
            using (var msi = new MemoryStream(data))
            using (var mso = new MemoryStream())
            {
                using (var gs = new GZipStream(msi, CompressionMode.Decompress, true))
                {
                    CopyTo(gs, mso);
                }
                 return (T)JsonConvert.DeserializeObject<T>(Encoding.UTF8.GetString(mso.ToArray()));
            }
        }
    }

---------------if response needs to be in pascal instead of camel then add this code and use it in line no 14------------------------------------------

    public class PascalCaseNamingStrategy : NamingStrategy
    {
        protected override string ResolvePropertyName(string name)
        {
            return ToPascalCase(name);
        }

        private static string ToPascalCase(string s)
        {
            if (string.IsNullOrEmpty(s) || !char.IsUpper(s[0]))
            {
                return s;
            }

            char[] chars = s.ToCharArray();

            for (int i = 0; i < chars.Length; i++)
            {
                if (i == 0 && !char.IsUpper(chars[i]))
                {
                    chars[i] = ToUpper(chars[i]);
                    break;
                }
                else if (i == 0)
                {
                    break;
                }

                if (i == 1 && !char.IsUpper(chars[i]))
                {
                    break;
                }

                bool hasNext = (i + 1 < chars.Length);
                if (i > 0 && hasNext && !char.IsUpper(chars[i + 1]))
                {
                    if (char.IsSeparator(chars[i + 1]))
                    {
                        chars[i] = ToLower(chars[i]);
                    }

                    break;
                }

                chars[i] = ToLower(chars[i]);
            }

            return new string(chars);
        }

        private static char ToLower(char c)
        {
#if HAVE_CHAR_TO_LOWER_WITH_CULTURE
            c = char.ToLower(c, CultureInfo.InvariantCulture);
#else
            c = char.ToLowerInvariant(c);
#endif
            return c;
        }

        private static char ToUpper(char c)
        {
#if HAVE_CHAR_TO_UPPER_WITH_CULTURE
            c = char.ToUpper(c, CultureInfo.InvariantCulture);
#else
            c = char.ToUpperInvariant(c);
#endif
            return c;
        }
    }
